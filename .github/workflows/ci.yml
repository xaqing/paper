name: Paper Validator CI
on: [push, pull_request]

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Code Style Check
        run: flake8 src tests --max-line-length=120
      - name: Run Tests with Coverage
        run: |
          python -m pytest tests/ --cov=src --cov-report=xml
          # 新增目录结构验证
          python -m src.validator structure check --config ./config/validation_rules.yaml

      # 新增论文深度校验 ▼▼▼
      - name: Academic Paper Validation
        run: |
          # 安装学术校验依赖（补充缺失的依赖安装）
          pip install -r requirements-validator.txt
          
          # 强化校验命令参数（修复路径问题）
          python -m src.validator.cli validate \
            --input ${{ github.workspace }}/paper/main.docx \
            --config ${{ github.workspace }}/config/validation_rules.yaml \
            --fail-on error \
            --report-dir ${{ github.workspace }}/reports

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports
          path: ${{ github.workspace }}/reports/
          path: |
            ./artifacts/annotated.docx
            ./reports/validation_summary.html
          Write-Output "当前工作目录：$(Get-Location)"
          Get-ChildItem coverage.xml | % { 
              Write-Output "文件路径：$($_.FullName)"
              Write-Output "文件大小：$($_.Length) bytes" 
          }

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          verbose: true
          working-directory: ${{ github.workspace }}
          branch: ${{ github.ref_name }}
          slug: xaqing/paper
          name: paper-validator

      - name: Token Validation
        run: |
          Write-Output "::group::令牌调试信息"
          Write-Output "令牌长度：$($env:CODECOV_TOKEN.Length)"
          Write-Output "令牌前缀：$($env:CODECOV_TOKEN.Substring(0,15))..."
          Write-Output "::endgroup::"
          
          if (-not $env:CODECOV_TOKEN.StartsWith('codecov-token=')) {
              Write-Output "::error::令牌前缀验证失败（必须以 codecov-token= 开头）"
              Exit 1
          }
          if ($env:CODECOV_TOKEN.Length -lt 40) {
              Write-Output "::error::令牌长度异常（当前长度：$($env:CODECOV_TOKEN.Length)）"
              Exit 1
          }
- name: Academic Validation
  run: |
    # 安装验证工具链
    pip install -r requirements-validator.txt
    
    # 执行核心校验
    python -m validator.cli check \
      --file ./paper/main.docx \
      --config ./config/validation_rules.yaml \
      --report-format json
    
    # 失败时中断流程
    if Test-Path validation_errors.json -And (Get-Content validation_errors.json | ConvertFrom-Json).errors.Count -gt 0 {
      Write-Output "::error:: 发现${error_count}个严重错误"
      Exit 1
    }
# 转换编码并验证语法（带错误处理）
iconv -f GBK -t UTF-8 .github/workflows/ci.yml -o ci_temp.yml
if ($?) {
    yamllint ci_temp.yml
    Remove-Item ci_temp.yml -ErrorAction SilentlyContinue
} else {
    Write-Output "::error:: 文件编码转换失败"
    Exit 1
}
# 完全删除以下 Network Diagnostics 步骤 ▼▼▼
